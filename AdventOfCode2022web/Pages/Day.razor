@page "/day/{dayNumber:int}"
@using AdventOfCode2022web.Domain.Puzzle;
@inject HttpClient Http

<h1>@_solver.GetType().Name</h1>
<div class="mb-3">
    <label class="form-label">The input below is the example data. Paste your own user input from <a href="https://adventofcode.com/2022/day/@dayNumber">Advent Of Code</a></label>
    <pre><textarea class="form-control" rows="10" @bind="Input" maxlength="10000000"></textarea></pre>
</div>
<div class="mb-3">
    <div class="mb-3">
        <button class="btn btn-primary" disabled=@IsTask1Running @onclick ="SolvePart1">Solve Part 1</button>
    </div>
    <div><pre>@Output1</pre></div>
</div>
<div class="mb-3">
    <div class="mb-3">
        <button class="btn btn-primary" disabled=@IsTask2Running @onclick ="SolvePart2">Solve Part 2</button>
    </div>
    <div><pre>@Output2</pre></div>
</div>

@code {
    [Parameter]
    public int dayNumber { get; set; }
    private IPuzzleSolver _solver = new CalorieCounting();
    private string Input { get; set; } = string.Empty;
    public bool IsTask1Running { get; set; } = false;
    public bool IsTask2Running { get; set; } = false;
    protected override async Task OnParametersSetAsync()
    {
        _solver = daySolvers[dayNumber - 1];
        Output1 = Output2 = string.Empty;
        Input = (await Http.GetStringAsync($"sample-data/{_solver.GetType().Name}.txt")).Replace("\r", "");
    }

    private string Output1 { get; set; } = string.Empty;
    private async Task SolvePart1()
    {
        IsTask1Running = true;
        await foreach (var s in _solver.Part1Async(Input))
        {
            Output1 = s;
            StateHasChanged();
        };
        IsTask1Running = false;
    }
    private string Output2 { get; set; } = string.Empty;
    private async Task SolvePart2()
    {
        IsTask2Running = true;
        await foreach (var s in _solver.Part2Async(Input))
        {
            Output2 = s;
            StateHasChanged();
        };
        IsTask2Running = false;
    }
    private IPuzzleSolver[] daySolvers = new IPuzzleSolver[]        {
            new CalorieCounting(),
            new RockPaperScissors(),
            new RucksackReorganization(),
            new CampCleanup(),
            new SupplyStacks(),
            new TuningTrouble(),
            new NoSpaceLeftOnDevice(),
            new TreetopTreeHouse(),
            new RopeBridge(),
            new CathodeRayTube(),
            new MonkeyInTheMiddle(), 
            new HillClimbingAlgorithm(), 
            new DistressSignal(),
            new RegolithReservoir(), 
            new BeaconExclusionZone(), 
            new ProboscideaVolcanium(),
            new PyroclasticFlow(),
            new BoilingBoulders(),
            new NotEnoughMinerals(),
            new GrovePositioningSystem(),// here
            new MonkeyMath(),
            new MonkeyMap(),
            new UnstableDiffusion(),
            new BlizzardBasin(),
            new FullOfHotAir()
    };
}
