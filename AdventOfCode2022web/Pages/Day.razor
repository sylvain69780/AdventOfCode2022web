@page "/day/{dayNumber:int}"
@using AdventOfCode2022web.Domain.Puzzle;
@using System.Diagnostics;
@using System.Text.RegularExpressions;
@inject HttpClient Http

<h1>
    @Regex.Replace(_solver.GetType().Name, "(\\B[A-Z])", " $1")</h1>
<div class="mb-3">
    <label class="form-label">The data below is that provided for example. Paste your own user input from <a href="https://adventofcode.com/2022/day/@dayNumber">Advent Of Code</a></label>
    <pre><textarea class="form-control" rows="10" @bind="Input" maxlength="10000000"></textarea></pre>
</div>
<div class="mb-3">
    <div class="mb-3">
        <button class="btn btn-primary" disabled=@IsTask1Running @onclick="SolveFirstPart">Solve Part 1</button>
    </div>
    <div><pre>@Output1</pre></div>
</div>
<div class="mb-3">
    <div class="mb-3">
        <button class="btn btn-primary" disabled=@IsTask2Running @onclick="SolveSecondPart">Solve Part 2</button>
    </div>
    <div><pre>@Output2</pre></div>
</div>

@code {
    [Parameter]
    public int dayNumber { get; set; }
    private IPuzzleSolver _solver = new CalorieCounting();
    private string Input { get; set; } = string.Empty;
    protected override async Task OnParametersSetAsync()
    {
        _solver = daySolvers[dayNumber - 1];
        Output1 = Output2 = string.Empty;
        Input = (await Http.GetStringAsync($"sample-data/{_solver.GetType().Name}.txt")).Replace("\r", "");
    }

    private string Output1 { get; set; } = string.Empty;
    public bool IsTask1Running { get; set; } = false;
    private async Task SolveFirstPart()
    {
        IsTask1Running = true;
        var stopwatch = new Stopwatch();
        foreach (var s in _solver.SolveFirstPart(Input))
        {
            stopwatch.Start();
            Output1 = s;
            StateHasChanged();
            stopwatch.Stop();
            await Task.Delay(Math.Max(0,16-(int)stopwatch.ElapsedMilliseconds));
            stopwatch.Reset();
        };
        IsTask1Running = false;
    }
    private string Output2 { get; set; } = string.Empty;
    public bool IsTask2Running { get; set; } = false;
    private async Task SolveSecondPart()
    {
        IsTask2Running = true;
        var stopwatch = new Stopwatch();
        foreach (var s in _solver.SolveSecondPart(Input))
        {
            stopwatch.Start();
            Output2 = s;
            StateHasChanged();
            stopwatch.Stop();
            await Task.Delay(Math.Max(0, 16 - (int)stopwatch.ElapsedMilliseconds));
            stopwatch.Reset();
        };
        IsTask2Running = false;
    }
    private IPuzzleSolver[] daySolvers = new IPuzzleSolver[]        {
            new CalorieCounting(),
            new RockPaperScissors(),
            new RucksackReorganization(),
            new CampCleanup(),
            new SupplyStacks(),
            new TuningTrouble(),
            new NoSpaceLeftOnDevice(),
            new TreetopTreeHouse(),
            new RopeBridge(),
            new CathodeRayTube(),
            new MonkeyInTheMiddle(), 
            new HillClimbingAlgorithm(), 
            new DistressSignal(),
            new RegolithReservoir(), 
            new BeaconExclusionZone(), 
            new ProboscideaVolcanium(),
            new PyroclasticFlow(),
            new BoilingBoulders(),
            new NotEnoughMinerals(),
            new GrovePositioningSystem(),
            new MonkeyMath(),
            new MonkeyMap(),
            new UnstableDiffusion(),
            new BlizzardBasin(),
            new FullOfHotAir()
    };
}
