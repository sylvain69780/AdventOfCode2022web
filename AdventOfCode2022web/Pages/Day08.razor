@page "/day08"
@inject HttpClient Http

<div class="mb-3">
    <label class="form-label">The input below is the example data. Paste your own user input from <a href="https://adventofcode.com/2022/day/8">Advent Of Code</a></label>
    <textarea class="form-control" rows="10" @bind="Input" maxlength="10000000"></textarea>
</div>
<div class ="mb-3">
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="SolvePart1">Solve Part 1</button>
    </div>
    <div>@Output1</div>
</div>
<div class="mb-3">
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="SolvePart2">Solve Part 2</button>
    </div>
    <div>@Output2</div>
</div>

@code {
    private string Input { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        Input = (await Http.GetStringAsync("sample-data/day08.txt")).Replace("\r", "");
    }

    private string Output1 { get; set; } = string.Empty;
    private void SolvePart1()
    {
        var input = Input.Split("\n");
        var gridWidth = input[0].Length;
        var gridHeight = input.Length;
        var explored = new HashSet<(int, int)>();
        var getGrid = (int x, int y) => (int)input[y][x] - (int)'0';
        foreach (var y in Enumerable.Range(0, gridHeight))
        {
            // left to right
            var hmax = -1;
            foreach (var x in Enumerable.Range(0, gridWidth))
            {
                var h = getGrid(x, y);
                if (h > hmax)
                {
                    hmax = h;
                    if (!explored.Contains((x, y))) explored.Add((x, y));
                }
            }
            // right to left
            hmax = -1;
            foreach (var x in Enumerable.Range(0, gridWidth).Reverse())
            {
                var h = getGrid(x, y);
                if (h > hmax)
                {
                    hmax = h;
                    if (!explored.Contains((x, y))) explored.Add((x, y));
                }
            }
        }
        foreach (var x in Enumerable.Range(0, gridWidth))
        {
            // top to down
            var hmax = -1;
            foreach (var y in Enumerable.Range(0, gridHeight))
            {
                var h = getGrid(x, y);
                if (h > hmax)
                {
                    hmax = h;
                    if (!explored.Contains((x, y))) explored.Add((x, y));
                }
            }
            // down to top
            hmax = -1;
            foreach (var y in Enumerable.Range(0, gridHeight).Reverse())
            {
                var h = getGrid(x, y);
                if (h > hmax)
                {
                    hmax = h;
                    if (!explored.Contains((x, y))) explored.Add((x, y));
                }
            }
        }
        Console.WriteLine(explored.Count);
        Output1 = explored.Count.ToString();
    }
    private string Output2 { get; set; } = string.Empty;
    private void SolvePart2()
    {
        var input = Input.Split("\n");
        var gridWidth = input[0].Length;
        var gridHeight = input.Length;
        var explored = new HashSet<(int, int)>();
        var getGrid = (int x, int y) => (int)input[y][x] - (int)'0';
        var directions = new List<(int, int)> { (1, 0), (-1, 0), (0, 1), (0, -1) };
        var scoreMax = 0;
        var borderReached = (int x, int y) => x < 0 || x >= gridWidth || y < 0 || y >= gridHeight;
        foreach (var y in Enumerable.Range(0, gridHeight))
            foreach (var x in Enumerable.Range(0, gridWidth))
            {
                var h = getGrid(x, y);
                var score = 1;
                foreach (var (dx, dy) in directions)
                {
                    var i = 1;
                    var (nx, ny) = (x, y);
                    do
                    {
                        (nx, ny) = (x + i * dx, y + i * dy);
                        if (borderReached(nx, ny)) break;
                        i++;
                    } while (getGrid(nx, ny) < h);
                    score *= (i - 1);
                }
                scoreMax = score > scoreMax ? score : scoreMax;
            }
        Console.WriteLine(scoreMax);
        Output2 = scoreMax.ToString();
    }
}