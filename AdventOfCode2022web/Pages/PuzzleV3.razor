@page "/puzzleV3/{PuzzleNumber:int}"
@using System.Diagnostics;
@using System.Text.RegularExpressions;
@using AdventOfCode2022web.Puzzles;
@inject HttpClient Http
@inject PuzzleHelper puzzleHelper;

<h1>@PuzzleTitle</h1>
<p>The code for this solution on <a href="https://github.com/sylvain69780/AdventOfCode2022web/blob/master/AdventOfCode2022/Puzzles/@(puzzleHelper.Puzzles[PuzzleNumber].Type.Name).cs">GitHub</a></p>
<div class="mb-3 form-check form-switch">
    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind="collapsePuzzleInput">
    <label class="form-check-label" for="flexSwitchCheckChecked">View puzzle input</label>
</div>
@if (collapsePuzzleInput)
{
    <div>
        <label class="form-label">The data below is that provided for example. Paste your own user input from <a href="https://adventofcode.com/2022/day/@PuzzleNumber">Advent Of Code</a>.</label>
        <pre><textarea class="form-control" aria-label="Puzzle Input" rows="10" @bind="Input" maxlength="10000000"></textarea></pre>
    </div>
}
<div class="btn-group mb-3" role="group">
    <button class="btn btn-primary" disabled="@IsTaskRunning" @onclick="SolveFirstPart">Solve First Part</button>
    <button class="btn btn-primary" disabled="@IsTaskRunning" @onclick="SolveSecondPart">Solve Second Part</button>
    <button class="btn btn-primary" disabled="@(!IsTaskRunning)" @onclick="CancelComputation">Cancel</button>
    @if (IsTaskRunning)
    {
        <span class="spinner-grow text-primary ms-2" role="status">
            <span class="visually-hidden">Simulation in progress...</span>
        </span>
    }
</div>
<div class="mb-3 d-flex align-items-center">
    <input type="range" class="form-range me-3" style="width: 200px;" @bind="DelayVisualizationValue" min="0" max="1000" step="50">
    <label class="form-check-label">Delay @DelayVisualizationValue ms</label>
</div>
@if (Response != string.Empty)
{
    <div class="p-3 mb-2 bg-primary text-white">@((IsTaskRunning ? string.Empty : "The answer of the puzzle is : ") + Response)</div>
}

@if ((_solver is BlizzardBasin))
{
    BlizzardBasin? a = _solver as BlizzardBasin;
    if (a!.Prev != null)
    {
        ViewBox = (-1, -1, a.Width + 2, a.Height + 2);
        var finished = (a.Arrival.x, a.Arrival.y, t:a.Minute);
        <svg viewBox="@ViewBox.xMin @ViewBox.yMin @ViewBox.xMax @ViewBox.yMax" class="img-fluid">
            <defs>
                <radialGradient id="myGradient">
                    <stop offset="10%" stop-color="chartreuse" />
                    <stop offset="80%" stop-color="green" />
                </radialGradient>
            </defs>
            <pattern id="gridPattern" width="1" height="1" patternUnits="userSpaceOnUse">
                <rect width="1" height="1" fill="white" stroke="gray" stroke-width="0.1" />
            </pattern>
            <rect x="@ViewBox.xMin" y="@ViewBox.yMin" width="@(ViewBox.xMax-ViewBox.xMin)" height="@(ViewBox.yMax-ViewBox.yMin)" fill="grey" />
            <rect x="@(ViewBox.xMin+1)" y="@(ViewBox.yMin+1)" width="@(ViewBox.xMax-ViewBox.xMin-3)" height="@(ViewBox.yMax-ViewBox.yMin-3)" fill="url(#gridPattern)" />
            <rect x="@(a.Start.x-1)" y="@(a.Start.y-1)" width="1" height="1" fill="blue"/>
            <rect x="@(a.Arrival.x-1)" y="@(a.Arrival.y-1)" width="1" height="1" fill="red" />

            @if ( a.Prev.ContainsKey(finished))
            {
                var np = finished;
                while (a.Prev.TryGetValue(np, out np))
                {
                    <use href="#myImage" x="@(np.x-1)" y="@(np.y-1)" />
                }
            }
            else
            {
                foreach (var p in a.Prev.Keys.Where(p => p.t == a.Minute).Select(p => (p.x, p.y)))
                {
                    <use href="#myImage" x="@(p.x-1)" y="@(p.y-1)" />
                }
            }

        </svg>
    }
}

@if ((_solver is UnstableDiffusion))
{
    UnstableDiffusion? a = _solver as UnstableDiffusion;
    if (a!.Elves.Length > 0)
    {
        var positions = a!.Elves;
        var prevPositions = a!.ElvesPrevPosition;
        var xmin = positions.Min(e => e.X) - 1;
        var ymin = positions.Min(e => e.Y) - 1;
        var xmax = positions.Max(e => e.X) + 4;
        var ymax = positions.Max(e => e.Y) + 4;
        if (xmin < ViewBox.xMin)
            ViewBox.xMin *= 2;
        if (ymin < ViewBox.yMin)
            ViewBox.yMin *= 2;
        if (xmax > ViewBox.xMax)
            ViewBox.xMax *= 2;
        if (ymax > ViewBox.yMax)
            ViewBox.yMax *= 2;
        <svg viewBox="@ViewBox.xMin @ViewBox.yMin @ViewBox.xMax @ViewBox.yMax" class="img-fluid">
            <defs>
                <radialGradient id="myGradient">
                    <stop offset="10%" stop-color="chartreuse" />
                    <stop offset="80%" stop-color="green" />
                </radialGradient>
            </defs>
            <pattern id="gridPattern" width="1" height="1" patternUnits="userSpaceOnUse">
                <rect width="1" height="1" fill="white" stroke="gray" stroke-width="0.1" />
            </pattern>
            <rect x="@ViewBox.xMin" y="@ViewBox.yMin" width="@(ViewBox.xMax-ViewBox.xMin)" height="@(ViewBox.yMax-ViewBox.yMin)" fill="url(#gridPattern)" />
            <g visibility="hidden">
                <g id="myImage">
                    <g transform="translate(0.5,0.5)">
                        <circle r="0.5" fill="url('#myGradient')" />
                        <g transform="translate(0, -0.05)">
                            <g id="eye">
                                <circle cx="0.15" r="0.13" fill="green" />
                                <circle cx="0.15" r="0.1" fill="white" />
                                <circle cx="0.12" r="0.05" fill="black" />
                            </g>
                            <use transform="scale(-1, 1)" href="#eye" />
                        </g>
                    </g>
                </g>
            </g>
            @for (var i = 0; i < positions.Length; i++)
            {
                var p = prevPositions[i];
                var pp = positions[i];
                var d = (pp.X - p.X, pp.Y - p.Y);
                var anim = string.Empty;
                var style = string.Empty;
                if (runAnimation)
                {
                    style = $"animation-duration : {DelayVisualizationValue * 80 / 100}ms;";
                    if (d == (1, 0))
                        anim = "elf-move-right";
                    if (d == (-1, 0))
                        anim = "elf-move-left";
                    if (d == (0, 1))
                        anim = "elf-move-down";
                    if (d == (0, -1))
                        anim = "elf-move-up";
                    <use href="#myImage" x="@(p.X)" y="@(p.Y)" class="@anim" style="@style" />
                }
                else
                {
                    <use href="#myImage" x="@(pp.X)" y="@(pp.Y)" class="" style="" />
                }

            }
        </svg>
    }
}

@code {
    [Parameter]
    public int PuzzleNumber { get; set; }

    (int xMin, int yMin, int xMax, int yMax) ViewBox;
    bool runAnimation = false;
    bool collapsePuzzleInput = false;
    private IPuzzleSolverV3? _solver;
    private bool DelayVisualization => DelayVisualizationValue > 0;
    private int DelayVisualizationValue = 500;
    private string? PuzzleTitle;
    private string? Input;
    private string? Response = string.Empty;
    private string? ViewData = string.Empty;
    protected string? Image64 { get; set; }
    private bool IsTaskRunning;
    private CancellationTokenSource _cts = new();
    private Stopwatch _stopwatch = new Stopwatch();
    protected override async Task OnParametersSetAsync()
    {
        var puzzle = puzzleHelper.Puzzles[PuzzleNumber];
        PuzzleTitle = puzzle.Title;
        _solver = (IPuzzleSolverV3)(Activator.CreateInstance(puzzle.Type))!;
        Response = string.Empty;
        ViewData = string.Empty;
        Input = (await Http.GetStringAsync($"sample-data/{puzzle.Type.Name}.txt")).Replace("\r", "");
        if ((_solver is UnstableDiffusion))
            ViewBox = (-4, -4, 4, 4);
        _cts = new CancellationTokenSource();
    }

    private void CancelComputation() => _cts.Cancel();

    private async Task UpdateView()
    {
        if (DelayVisualization || _stopwatch.ElapsedMilliseconds > 1000)
        {
            if (DelayVisualization)
            {
                runAnimation = true;
                StateHasChanged();
                await Task.Delay(DelayVisualizationValue);
                runAnimation = false;
                StateHasChanged();
                await Task.Delay(1);
            }
            else
            {
                runAnimation = false;
                StateHasChanged();
                await Task.Delay(1);
            }
            _stopwatch.Restart();
        }
    }

    private async Task SolveFirstPart() => await Solve(_solver!.SolveFirstPart);
    private async Task SolveSecondPart() => await Solve(_solver!.SolveSecondPart);

    private async Task Solve(Func<IEnumerable<string>> part)
    {

        IsTaskRunning = true;
        Response = string.Empty;
        ViewData = string.Empty;
        Image64 = null;
        _stopwatch.Start();
        using (_cts = new CancellationTokenSource())
        {
            _solver.Setup(Input);
            foreach (var s in part())
            {
                Response = s;
                await UpdateView();
                if (_cts.IsCancellationRequested)
                    break;
            }
            await UpdateView();
        }
        IsTaskRunning = false;
        _stopwatch.Stop();
    }
}
