@page "/UnstableDiffusionPage"
@using System.Timers;
@inherits PuzzleSolutionPageBase<UnstableDiffusionSolution>
<h2>Unstable Diffusion</h2>
<div class="row">
    <div class="col-lg-6">
        <p>We need to simulate the diffusion of strangely behaving particules.</p>
        @if ((PuzzleSolution is not null))
        {
            if (SolvingStep != _previousStep && AnimationDuration > 0)
                SetTimer();
            if (PuzzleSolution!.Elves.Length > 0)
            {
                var positions = PuzzleSolution.Elves;
                var prevPositions = PuzzleSolution.ElvesPrevPosition;
                foreach (var p in positions)
                {
                    if (p.X < _viewBox.xMin)
                        _viewBox.xMin *= 2;
                    if (p.Y < _viewBox.yMin)
                        _viewBox.yMin *= 2;
                    if (p.X >= _viewBox.xMax)
                        _viewBox.xMax *= 2;
                    if (p.Y >= _viewBox.yMax)
                        _viewBox.yMax *= 2;
                }
                <svg viewBox="@_viewBox.xMin @_viewBox.yMin @(_viewBox.xMax-_viewBox.xMin) @(_viewBox.yMax-_viewBox.yMin)" class="img-fluid">
                    <defs>
                        <radialGradient id="myGradient">
                            <stop offset="10%" stop-color="chartreuse" />
                            <stop offset="80%" stop-color="green" />
                        </radialGradient>
                    </defs>
                    <pattern id="gridPattern" width="1" height="1" patternUnits="userSpaceOnUse">
                        <rect width="1" height="1" fill="white" stroke="gray" stroke-width="0.1" />
                    </pattern>
                    <rect x="@_viewBox.xMin" y="@_viewBox.yMin" width="@(_viewBox.xMax-_viewBox.xMin)" height="@(_viewBox.yMax-_viewBox.yMin)" fill="url(#gridPattern)" />
                    <g visibility="hidden">
                        <g id="myImage">
                            <g transform="translate(0.5,0.5)">
                                <circle r="0.5" fill="url('#myGradient')" />
                                <g transform="translate(0, -0.05)">
                                    <g id="eye">
                                        <circle cx="0.15" r="0.13" fill="green" />
                                        <circle cx="0.15" r="0.1" fill="white" />
                                        <circle cx="0.12" r="0.05" fill="black" />
                                    </g>
                                    <use transform="scale(-1, 1)" href="#eye" />
                                </g>
                            </g>
                        </g>
                    </g>
                    @if (AnimationDuration > 0 && !_animationCompleted)
                    {
                        var style = $"animation-duration : {AnimationDuration * 80 / 100}ms;";
                        for (var i = 0; i < positions.Length; i++)
                        {
                            var p = prevPositions[i];
                            var pp = positions[i];
                            var d = (pp.X - p.X, pp.Y - p.Y);
                            var anim = string.Empty;
                            if (AnimationDuration > 0)
                            {
                                if (d == (1, 0))
                                    anim = "elf-move-right";
                                if (d == (-1, 0))
                                    anim = "elf-move-left";
                                if (d == (0, 1))
                                    anim = "elf-move-down";
                                if (d == (0, -1))
                                    anim = "elf-move-up";
                                <use href="#myImage" x="@(p.X)" y="@(p.Y)" class="@anim" style="@style" />
                            }
                        }
                    }
                    else
                    {
                        for (var i = 0; i < positions.Length; i++)
                        {
                            var pp = positions[i];
                            <use href="#myImage" x="@(pp.X)" y="@(pp.Y)" />
                        }
                    }
                </svg>
                @if (_animationCompleted)
                {
                    <p>Animation Stopped</p>
                }
                else
                {
                    <p>Animation Running</p>
                }
            }
        }
    </div>
    <div class="col-lg-6">
        <PuzzleSolutionViewer Page=@this />
    </div>
</div>
@code {

    private (int xMin, int yMin, int xMax, int yMax) _viewBox = (-4, -4, 4, 4);
    private System.Timers.Timer _animationTimer = new();
    private bool _animationCompleted = true;
    private int _previousStep = -1;

    protected override void OnInitialized()
    {
        _animationTimer.Elapsed += (object? sender, System.Timers.ElapsedEventArgs e) => StopAnimation();
        base.OnInitialized();
    }

    private void SetTimer()
    {
        _previousStep = SolvingStep;
        _animationTimer.Interval = AnimationDuration * 90 / 100 + 1;
        _animationTimer.Start();
        _animationCompleted = false;
    }
    private void StopAnimation()
    {
        _animationCompleted = true;
        _animationTimer.Stop();
        StateHasChanged();
    }

    public override void Dispose()
    {
        _animationTimer.Stop();
        _animationTimer.Dispose();
        base.Dispose();
    }
}
