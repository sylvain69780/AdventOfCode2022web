@page "/DefaultPuzzleView/{PuzzleNumber:int}"
@using AdventOfCode2022web.Puzzles;
@using System.Diagnostics;
@inject PuzzleHelper puzzleHelper;
@inject HttpClient Http

<h1>@(puzzleHelper.Puzzles[PuzzleNumber].Title)</h1>
<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <h2>Visualisation</h2>
            <div class="w-100 bg-primary text-white border mb-2">
                @if (puzzleHelper.Puzzles[PuzzleNumber].Type == typeof(BlizzardBasin))
                {
                    <BlizzardBasinView Solver=@((BlizzardBasin)_solver!) AnimationDuration="@_animationDuration" />
                }
                else if (puzzleHelper.Puzzles[PuzzleNumber].Type == typeof(UnstableDiffusion))
                {
                    <UnstableDiffusionView Solver=@_solver AnimationDuration="@_animationDuration" />
                }
                else if (puzzleHelper.Puzzles[PuzzleNumber].Type == typeof(Sudoku))
                {
                    <SudokuView Solver=@_solver AnimationDuration="@_animationDuration" />
                }
                else if (puzzleHelper.Puzzles[PuzzleNumber].Type == typeof(RegolithReservoir))
                {
                    <RegolithReservoirView Solver=@_solver AnimationDuration="@_animationDuration" />
                }
                else
                {
                    <p class="p-2">No visualisation available for this Puzzle.</p>
                }
            </div>
        </div>
        <div class="col-lg-6">
            <h2>Code an sample input</h2>
            <div class="mb-3 form-check form-switch">
                <input class="form-check-input" type="checkbox" id="flexSwitchCheckCheckedCode" @bind="_collapseViewCode">
                <label class="form-check-label" for="flexSwitchCheckCheckedCode">View code</label>
            </div>
            @if (_collapseViewCode)
            {
                <p>The code for this solution on <a href="https://github.com/sylvain69780/AdventOfCode2022web/blob/master/AdventOfCode2022/Puzzles/@(puzzleHelper.Puzzles[PuzzleNumber].Type.Name).cs">GitHub</a></p>
                <div class="text-white bg-dark">
                    <pre class="p-2">            
                        @_code
                    </pre>
                </div>
            }
            <div class="mb-3 form-check form-switch">
                <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind="_collapsePuzzleInput">
                <label class="form-check-label" for="flexSwitchCheckChecked">View input</label>
            </div>
            @if (_collapsePuzzleInput)
            {
                <div>
                    <label class="form-label">The data below is that provided for example. Paste your own user input from <a href="https://adventofcode.com/2022/day/@PuzzleNumber">Advent Of Code</a>.</label>
                    <pre><textarea class="form-control" aria-label="Puzzle Input" rows="10" @bind="_input" maxlength="10000000"></textarea></pre>
                </div>
            }
            <h2>Verify results</h2>
            <div class="row mb-3">
                <button class="col-4 btn btn-primary" disabled="@_isTaskRunning" @onclick=@(() => Solve(_solver!.SolveFirstPart))>First Part</button>
                <button class="col-4 btn btn-primary" disabled="@_isTaskRunning" @onclick=@(() => Solve(_solver!.SolveSecondPart))>Second Part</button>
                <button class="col-4 btn btn-primary" disabled="@(!_isTaskRunning)" @onclick=@(() => _cancel = true)>Cancel</button>
            </div>
            <h2>Delay between computation steps</h2>
            <div class="row mb-3">
                <div class="col-md-9">
                    <input type="range" class="form-range" id="delayRange" @bind="_delayVisualizationValue" min="0" max="1000" step="50">
                </div>
                <div class="col-md-3">
                    <label class="form-label" for="delayRange">@_delayVisualizationValue ms</label>
                </div>
            </div>

            <h2>Response</h2>
            @if (Response != string.Empty)
            {
                    <div class="p-2 mb-2 bg-primary text-white"><pre>@Response</pre></div>
                    if (_iterations > 0)
                    {
                        <div>@($"Result found after {_iterations} iteration(s) of the aglorithm.")</div>
                    }
            }
            @if (_isTaskRunning)
            {
                <span class="spinner-grow text-primary ms-2"></span>
            }
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int PuzzleNumber { get; set; }

    private string _input = string.Empty;
    private string _code = string.Empty;
    private IPuzzleSolutionIter? _solver;
    private int _animationDuration = 500;
    private bool _collapsePuzzleInput = false;
    private bool _collapseViewCode = false;
    private bool _cancel;
    private int _delayVisualizationValue = 500;
    private bool _isTaskRunning;
    private Stopwatch _stopwatch = new Stopwatch();
    private int _puzzleNumber = -1;
    private string Response { get; set; } = string.Empty;
    private int _iterations;

    public void UpdateView(int animationDuration)
    {
        _animationDuration = animationDuration;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (PuzzleNumber != _puzzleNumber)
        {
            _cancel = true;
            Response = string.Empty;
            _iterations = 0;
            _puzzleNumber = PuzzleNumber;
            var puzzle = puzzleHelper.Puzzles[_puzzleNumber];
            _solver = (IPuzzleSolutionIter)(Activator.CreateInstance(puzzle.Type))!;
            _input = (await Http.GetStringAsync($"sample-data/{puzzle.Type.Name}.txt")).Replace("\r", "");
            _code = await Http.GetStringAsync($"https://raw.githubusercontent.com/sylvain69780/AdventOfCode2022web/master/AdventOfCode2022/Puzzles/{puzzle.Type.Name}.cs");
        }
        base.OnParametersSet();
    }

    private async Task Solve(Func<IEnumerable<string>> part)
    {
        Response = string.Empty;
        _iterations = 0;
        _solver!.Initialize(_input);
        _isTaskRunning = true;
        _cancel = false;
        _stopwatch.Start();
        foreach (var s in part())
        {
            Response = s;
            _iterations++;
            if (_delayVisualizationValue > 0 || _stopwatch.ElapsedMilliseconds > 15000)
            {
                if (_delayVisualizationValue > 0)
                {
                    UpdateView(_delayVisualizationValue);
                    await Task.Delay(_delayVisualizationValue);
                }
                UpdateView(0);
                await Task.Delay(1);
                _stopwatch.Restart();
            }
            if (_cancel)
                break;
        }
        _isTaskRunning = false;
        _stopwatch.Stop();
        UpdateView(_delayVisualizationValue);
    }
}
