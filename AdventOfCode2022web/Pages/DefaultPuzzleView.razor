@page "/DefaultPuzzleView/{PuzzleNumber:int}"
@using AdventOfCode2022web.Puzzles;
@using System.Diagnostics;
@inject PuzzleHelper puzzleHelper;
@inject HttpClient Http

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <h1>@(puzzleHelper.Puzzles[PuzzleNumber].Title)</h1>
            <p>The code for this solution on <a href="https://github.com/sylvain69780/AdventOfCode2022web/blob/master/AdventOfCode2022/Puzzles/@(puzzleHelper.Puzzles[PuzzleNumber].Type.Name).cs">GitHub</a></p>
            <div class="mb-3 form-check form-switch">
                <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind="_collapsePuzzleInput">
                <label class="form-check-label" for="flexSwitchCheckChecked">View puzzle input</label>
            </div>
            @if (_collapsePuzzleInput)
            {
                <div>
                    <label class="form-label">The data below is that provided for example. Paste your own user input from <a href="https://adventofcode.com/2022/day/@PuzzleNumber">Advent Of Code</a>.</label>
                    <pre><textarea class="form-control" aria-label="Puzzle Input" rows="10" @bind="_input" maxlength="10000000"></textarea></pre>
                </div>
            }

            <div class="btn-group mb-3" role="group">
                <button class="btn btn-primary" disabled="@_isTaskRunning" @onclick=@(() => Solve(_solver!.SolveFirstPart))>Solve First Part</button>
                <button class="btn btn-primary" disabled="@_isTaskRunning" @onclick=@(() => Solve(_solver!.SolveSecondPart))>Solve Second Part</button>
                <button class="btn btn-primary" disabled="@(!_isTaskRunning)" @onclick=@(() => _cancel = true)>Cancel</button>
                @if (_isTaskRunning)
                {
                    <span class="spinner-grow text-primary ms-2"></span>
                }
            </div>
            <div class="mb-3 d-flex align-items-center">
                <input type="range" class="form-range me-3" style="width: 200px;" @bind="_delayVisualizationValue" min="0" max="1000" step="50">
                <label class="form-check-label">Delay @_delayVisualizationValue ms</label>
            </div>

            @if (Response != string.Empty)
            {
                if (Response.Contains('\n'))
                {
                    <div class="p-3 mb-2 bg-primary text-white">
                        <pre>@(_isTaskRunning ? $"Loop turn {Iterations}" : $"The answer of the puzzle after {Iterations} loops is : ")</pre>
                        <pre>@Response</pre>
                    </div>
                }
                else
                {
                    <div class="p-3 mb-2 bg-primary text-white">@(_isTaskRunning ? $"Loop turn {Iterations}" : $"The answer of the puzzle after {Iterations} loop(s) is : ")@Response</div>
                }
            }
        </div>
        <div class="col-md-6">
            @if (puzzleHelper.Puzzles[PuzzleNumber].Type == typeof(BlizzardBasin))
            {
                <BlizzardBasinVisualization Solver="@((BlizzardBasin)_solver!)" AnimationDuration="@_animationDuration" />
            }
            else if (puzzleHelper.Puzzles[PuzzleNumber].Type == typeof(UnstableDiffusion))
            {
                <UnstableDiffusionVisualization Solver="@((UnstableDiffusion)_solver!)" AnimationDuration="@_animationDuration" />
            }
            else if (puzzleHelper.Puzzles[PuzzleNumber].Type == typeof(Sudoku))
            {
                <SudokuVisualization Solver="@((Sudoku)_solver!)" AnimationDuration="@_animationDuration" />
            }
            else
            {
                <p>No visualisation available for this Puzzle.</p>
            }
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int PuzzleNumber { get; set; }

    private string _input = string.Empty;
    private IIncrementalPuzzleSolver? _solver;
    private int _animationDuration = 500;
    private bool _collapsePuzzleInput = false;
    private bool _cancel;
    private int _delayVisualizationValue = 500;
    private bool _isTaskRunning;
    private Stopwatch _stopwatch = new Stopwatch();
    private int _puzzleNumber = -1;
    private string Response { get; set; } = string.Empty;
    private int Iterations { get; set; }

    public void UpdateView(int animationDuration)
    {
        _animationDuration = animationDuration;
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        var puzzle = puzzleHelper.Puzzles[PuzzleNumber];
        _solver = (IIncrementalPuzzleSolver)(Activator.CreateInstance(puzzle.Type))!;

        if (PuzzleNumber != _puzzleNumber)
        {
            _input = (await Http.GetStringAsync($"sample-data/{puzzle.Type.Name}.txt")).Replace("\r", "");
            _puzzleNumber = PuzzleNumber;
        }
        base.OnParametersSet();
    }

    private async Task Solve(Func<IEnumerable<string>> part)
    {
        Response = string.Empty;
        Iterations = 0;
        _solver!.Initialize(_input);
        _isTaskRunning = true;
        _cancel = false;
        _stopwatch.Start();
        foreach (var s in part())
        {
            Response = s;
            Iterations++;
            if (_delayVisualizationValue > 0 || _stopwatch.ElapsedMilliseconds > 15000)
            {
                if (_delayVisualizationValue > 0)
                {
                    UpdateView(_delayVisualizationValue);
                    await Task.Delay(_delayVisualizationValue);
                }
                UpdateView(0);
                await Task.Delay(1);
                _stopwatch.Restart();
            }
            if (_cancel)
                break;
        }
        _isTaskRunning = false;
        _stopwatch.Stop();
        UpdateView(_delayVisualizationValue);
    }
}
