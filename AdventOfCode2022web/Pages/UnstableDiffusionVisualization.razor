@using System.Timers;
@using sylvain69780.AdventOfCode2022.Blazor.Shared.GraphicsDefinition;

@implements IDisposable;
<p>We need to simulate the diffusion of strangely behaving particules.</p>
@if ((Page!.PuzzleSolution is not null))
{
    if (Page.SolvingStep != _previousStep && Page.AnimationDuration > 0)
        SetTimer();
    if (Page.PuzzleSolution!.Elves.Length > 0)
    {
        var positions = Page.PuzzleSolution.Elves;
        var prevPositions = Page.PuzzleSolution.ElvesPrevPosition;
        foreach (var p in positions)
        {
            if (p.X < _viewBox.xMin)
                _viewBox.xMin *= 2;
            if (p.Y < _viewBox.yMin)
                _viewBox.yMin *= 2;
            if (p.X >= _viewBox.xMax)
                _viewBox.xMax *= 2;
            if (p.Y >= _viewBox.yMax)
                _viewBox.yMax *= 2;
        }
        <svg viewBox="@_viewBox.xMin @_viewBox.yMin @(_viewBox.xMax-_viewBox.xMin) @(_viewBox.yMax-_viewBox.yMin)" class="img-fluid">
            <Elf />
            <pattern id="gridPattern" width="1" height="1" patternUnits="userSpaceOnUse">
                <rect width="1" height="1" fill="white" stroke="gray" stroke-width="0.1" />
            </pattern>
            <rect x="@_viewBox.xMin" y="@_viewBox.yMin" width="@(_viewBox.xMax-_viewBox.xMin)" height="@(_viewBox.yMax-_viewBox.yMin)" fill="url(#gridPattern)" />
            @if (Page.AnimationDuration > 0 && !_animationCompleted)
            {
                var style = $"animation-duration : {Page.AnimationDuration * 80 / 100}ms;";
                for (var i = 0; i < positions.Length; i++)
                {
                    var p = prevPositions[i];
                    var pp = positions[i];
                    var d = (pp.X - p.X, pp.Y - p.Y);
                    var anim = string.Empty;
                    if (Page.AnimationDuration > 0)
                    {
                        if (d == (1, 0))
                            anim = "elf-move-right";
                        if (d == (-1, 0))
                            anim = "elf-move-left";
                        if (d == (0, 1))
                            anim = "elf-move-down";
                        if (d == (0, -1))
                            anim = "elf-move-up";
                        <use href="#elf" x="@(p.X)" y="@(p.Y)" class="@anim" style="@style" />
                    }
                }
            }
            else
            {
                for (var i = 0; i < positions.Length; i++)
                {
                    var pp = positions[i];
                    <use href="#elf" x="@(pp.X)" y="@(pp.Y)" />
                }
            }
        </svg>
@*        @if (_animationCompleted)
        {
            <p>Animation Stopped</p>
        }
        else
        {
            <p>Animation Running</p>
        }*@
    }
}

@code {

    [Parameter]
    public UnstableDiffusionPage? Page { get; set; }

    private (int xMin, int yMin, int xMax, int yMax) _viewBox = (-4, -4, 4, 4);
    private System.Timers.Timer _animationTimer = new();
    private bool _animationCompleted = true;
    private int _previousStep = -1;

    protected override void OnInitialized()
    {
        _animationTimer.Elapsed += (object? sender, System.Timers.ElapsedEventArgs e) => StopAnimation();
        base.OnInitialized();
    }

    private void SetTimer()
    {
        _previousStep = Page!.SolvingStep;
        _animationTimer.Interval = Page.AnimationDuration * 90 / 100 + 1;
        _animationTimer.Start();
        _animationCompleted = false;
    }
    private void StopAnimation()
    {
        _animationCompleted = true;
        _animationTimer.Stop();
        StateHasChanged();
    }

    public void Dispose()
    {
        _animationTimer.Stop();
        _animationTimer.Dispose();
    }
}
