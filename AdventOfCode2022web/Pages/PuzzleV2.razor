@page "/puzzleV2/{PuzzleNumber:int}"
@using System.Diagnostics;
@using System.Text.RegularExpressions;
@using AdventOfCode2022web.Puzzles;
@inject HttpClient Http
@inject PuzzleHelper puzzleHelper;

<h1>@PuzzleTitle</h1>
<div class="mb-3">The code for this solution on <a href="https://github.com/sylvain69780/AdventOfCode2022web/blob/master/AdventOfCode2022/Puzzles/@(puzzleHelper.Puzzles[PuzzleNumber].Type.Name).cs">GitHub</a></div>
<div class="mb-3">
    <label class="form-label">The data below is that provided for example. Paste your own user input from <a href="https://adventofcode.com/2022/day/@PuzzleNumber">Advent Of Code</a>.</label>
    <pre><textarea class="form-control" rows="10" @bind="Input" maxlength="10000000"></textarea></pre>
</div>
<div class="mb-3">
    <div class="row">
        <div class="col-sm">
            <div class="btn-group" role="group">
                <button class="btn btn-primary" disabled="@IsTaskRunning" @onclick="SolveFirstPart">Solve First Part</button>
                <button class="btn btn-primary" disabled="@IsTaskRunning" @onclick="SolveSecondPart">Solve Second Part</button>
                <button class="btn btn-secondary" disabled="@(!IsTaskRunning)" @onclick="CancelComputation">Cancel</button>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-sm">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="delayCheckbox" @bind="DelayVisualization" />
                <label class="form-check-label" for="delayCheckbox">Slow down simulation loop: <span id="delayValue">@DelayVisualizationValue</span> ms</label>
            </div>
        </div>
        <div class="row">
            <div class="col-sm">
                <div class="mb-3">
                    <input type="range" class="form-range" @bind="DelayVisualizationValue" min="100" max="1000">
                </div>
            </div>
        </div>
    </div>
</div>
<div class="p-3 mb-2 bg-primary text-white">@Response</div>
@if (Image64 != null)
{
    <div class="p-3 mb-2 bg-secondary text-white">
        <img src=@Image64 class="puzzle-image" style="image-rendering: pixelated" />
    </div>
}
else
{
    <div class="p-3 mb-2 bg-secondary text-white"><pre>@ViewData</pre></div>
}

@code {
    private IPuzzleSolverV2? _solver;
    [Parameter]
    public int PuzzleNumber { get; set; }
    private bool DelayVisualization = true;
    private int DelayVisualizationValue = 1000;
    private string? PuzzleTitle;
    private string? Input;
    private string? Response;
    private string? ViewData;
    protected string? Image64 { get; set; }
    private bool IsTaskRunning;
    private CancellationTokenSource _cts = new();
    private Stopwatch stopwatch = new Stopwatch();
    protected override async Task OnParametersSetAsync()
    {
        var puzzle = puzzleHelper.Puzzles[PuzzleNumber];
        PuzzleTitle = puzzle.Title;
        _solver = (IPuzzleSolverV2)(Activator.CreateInstance(puzzle.Type))!;
        Response = "The solution will be displayed here.";
        ViewData = string.Empty;
        Input = (await Http.GetStringAsync($"sample-data/{puzzle.Type.Name}.txt")).Replace("\r", "");
    }

    private void CancelComputation() => _cts.Cancel();

    private async Task UpdateView(Func<string> fs, bool isEndResult)
    {
        if (isEndResult || DelayVisualization || stopwatch.ElapsedMilliseconds > 1000 || !stopwatch.IsRunning)
        {
            var s = fs();
            if (s.Length > 25 && s[..23] == "data:image/png;base64, ")
                Image64 = s;
            else
                ViewData = s;
            StateHasChanged();
            if (DelayVisualization)
                await Task.Delay(DelayVisualizationValue);
            else
                await Task.Delay(1);
            stopwatch.Restart();
        }
    }

    private async Task SolveFirstPart()
    {

        IsTaskRunning = true;
        Response = string.Empty;
        ViewData = null;
        Image64 = null;
        using (_cts = new CancellationTokenSource())
            Response = await _solver!.SolveFirstPart(Input!, UpdateView, _cts.Token);
        IsTaskRunning = false;
        stopwatch.Stop();
    }

    private async Task SolveSecondPart()
    {
        IsTaskRunning = true;
        Response = string.Empty;
        ViewData = null;
        Image64 = null;
        using (_cts = new CancellationTokenSource())
            Response = await _solver!.SolveSecondPart(Input!, UpdateView, _cts.Token);
        IsTaskRunning = false;
        stopwatch.Stop();
    }
}
