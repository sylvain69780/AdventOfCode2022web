@page "/puzzleV2/{PuzzleNumber:int}"
@using System.Diagnostics;
@using System.Text.RegularExpressions;
@using AdventOfCode2022web.Puzzles;
@inject HttpClient Http
@implements IDisposable

<h1>@PuzzleTitle</h1>
<div class="mb-3">
    <label class="form-label">The data below is that provided for example. Paste your own user input from <a href="https://adventofcode.com/2022/day/@PuzzleNumber">Advent Of Code</a></label>
    <pre><textarea class="form-control" rows="10" @bind="Input" maxlength="10000000"></textarea></pre>
</div>
<div class="mb-3">
    <button class="btn btn-primary" disabled=@IsTaskRunning @onclick="SolveFirstPart">Solve First Part</button>
    <button class="btn btn-primary" disabled=@IsTaskRunning @onclick="SolveSecondPart">Solve Second Part</button>
    <button class="btn btn-secondary" disabled=@( !IsTaskRunning ) @onclick="CancelComputation">Cancel</button>
</div>
<div class="p-3 mb-2 bg-primary text-white">@Response</div>
<div class="p-3 mb-2 bg-secondary text-white"><pre>@ViewData</pre></div>
<div class="p-3 mb-2 bg-secondary text-white">
    @if (Image64 != null)
    {
        <img src=@Image64 />
    }
</div>

@code {
    private IPuzzleSolverV2? _solver;
    [Parameter]
    public int PuzzleNumber { get; set; }
    private string? PuzzleTitle;
    private string? Input;
    private string? Response;
    private string? ViewData;
    protected string? Image64 { get; set; }
    private bool IsTaskRunning;
    private CancellationTokenSource _cts = new();
    protected override async Task OnParametersSetAsync()
    {
        var puzzle = PuzzleHelper.Puzzles[PuzzleNumber];
        PuzzleTitle = puzzle.Title;
        _solver = (IPuzzleSolverV2)(Activator.CreateInstance(puzzle.Type))!;
        Response = "The solution will be displayed here.";
        ViewData = string.Empty;
        Input = (await Http.GetStringAsync($"sample-data/{puzzle.Type.Name}.txt")).Replace("\r", "");
    }

    private void CancelComputation()
    {
        _cts.Cancel();
    }

    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }

    private async Task SolveFirstPart()
    {
        IsTaskRunning = true;
        Response = string.Empty;
        ViewData = null;
        using (_cts = new CancellationTokenSource())
            Response = await _solver!.SolveFirstPart(Input!, async (string s) =>
            {
                if (s[..22] == "data:image/png;base64, ")
                    ViewData = s;
                else
                    Image64 = s;
                StateHasChanged();
                await Task.Delay(1);
            }, _cts.Token);
        IsTaskRunning = false;
    }

    private async Task SolveSecondPart()
    {
        IsTaskRunning = true;
        Response = string.Empty;
        ViewData = null;
        using (_cts = new CancellationTokenSource())
            Response = await _solver!.SolveSecondPart(Input!, async (string s) =>
            {
                if (s.Length > 25 && s[..23] == "data:image/png;base64, ")
                    Image64 = s;
                else
                    ViewData = s;
                StateHasChanged();
                await Task.Delay(1);
            }, _cts.Token);
        IsTaskRunning = false;
    }
}
