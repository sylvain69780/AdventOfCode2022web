@if (Page!.PuzzleSolution!.GroupsOfElves is not null)
{
    <svg viewBox="0,-1,@MaxElfesDisplayed,3">
        <GraphicsDefinitionElf />
        @if (@Page.PuzzleSolution.CurrentSum > 0)
        {
            <g transform="translate(@(MaxElfesDisplayed / 2+1),0.5)">
                <g transform="translate(.5,-.5)">
                    <text font-family="Comic Sans" font-weight="bold" font-size=".5" dominant-baseline="middle" text-anchor="middle" fill="black">@Page.PuzzleSolution.CurrentSum</text>
                </g>
            </g>
        }
        <g class="elf-moving-@(Page.SolvingStep %2)" style=@AnimationTimingStyle>
            @for (var elfDisplayed = 0; elfDisplayed <= MaxElfesDisplayed; elfDisplayed++)
            {
                var elfIndex = Page.SolvingStep + elfDisplayed - MaxElfesDisplayed / 2;
                if (elfIndex < 0 || elfIndex >= Page.PuzzleSolution.GroupsOfElves.Length)
                    continue;
                var calories = Page.PuzzleSolution.GroupsOfElves[elfIndex];
                if (calories != string.Empty)
                {
                    var x = MaxElfesDisplayed - elfDisplayed;
                    var y = elfIndex == Page.SolvingStep ? 1 : 1;
                    <use href="#elf" x="@x" y="@y" />
                    if ( elfIndex >= Page.SolvingStep )
                    {
                        <g transform="translate(.5,-0.2)">
                            <text x="@x" y="@y" font-family="Comic Sans" font-size=".3" dominant-baseline="middle" text-anchor="middle" fill="black">@calories</text>
                        </g>
                    }
                }
            }
        </g>
    </svg>
}

@code {
    [Parameter]
    public CalorieCountingPage? Page { get; set; }

    const int MaxElfesDisplayed = 15;
    string AnimationTimingStyle => $"--animation-duration: {Page!.AnimationDuration * 90 / 100}ms;";

}
