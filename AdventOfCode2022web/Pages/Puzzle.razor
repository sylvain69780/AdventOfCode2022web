@page "/puzzle/{PuzzleNumber:int}"
@using System.Diagnostics;
@using System.Text.RegularExpressions;
@using AdventOfCode2022web.Puzzles;
@inject HttpClient Http

<h1>@PuzzleTitle</h1>
<div class="mb-3">
    <label class="form-label">The data below is that provided for example. Paste your own user input from <a href="https://adventofcode.com/2022/day/@PuzzleNumber">Advent Of Code</a></label>
    <pre><textarea class="form-control" rows="10" @bind="Input" maxlength="10000000"></textarea></pre>
</div>
<div class="mb-3">
    <div class="mb-3">
        <button class="btn btn-primary" disabled=@IsTask1Running @onclick="SolveFirstPart">Solve Part 1</button>
    </div>
    <div><pre>@Output1</pre></div>
</div>
<div class="mb-3">
    <div class="mb-3">
        <button class="btn btn-primary" disabled=@IsTask2Running @onclick="SolveSecondPart">Solve Part 2</button>
    </div>
    <div><pre>@Output2</pre></div>
</div>

@code {
    private IPuzzleSolver? _solver;
    [Parameter]
    public int PuzzleNumber { get; set; }
    private string? PuzzleTitle;
    private string? Input;
    private string? Output1;
    private string? Output2;
    private bool IsTask1Running;
    private bool IsTask2Running;
    protected override async Task OnParametersSetAsync()
    {
        var puzzle = PuzzleHelper.Puzzles[PuzzleNumber];
        PuzzleTitle = puzzle.Title;
        _solver = (IPuzzleSolver)(Activator.CreateInstance(puzzle.Type))!;
        Output1 = Output2 = string.Empty;
        Input = (await Http.GetStringAsync($"sample-data/{puzzle.Type.Name}.txt")).Replace("\r", "");
    }

    private async Task SolveFirstPart()
    {
        IsTask1Running = true;
        var stopwatch = new Stopwatch();
        stopwatch.Start();
        foreach (var s in _solver!.SolveFirstPart(Input!))
        {
            Output1 = s;
            StateHasChanged();
            stopwatch.Stop();
            await Task.Delay(Math.Max(0,16 - (int)stopwatch.ElapsedMilliseconds));
            stopwatch.Restart();
        };
        stopwatch.Stop();
        IsTask1Running = false;
    }
    private async Task SolveSecondPart()
    {
        IsTask2Running = true;
        var stopwatch = new Stopwatch();
        stopwatch.Start();
        foreach (var s in _solver!.SolveSecondPart(Input!))
        {
            Output2 = s;
            StateHasChanged();
            stopwatch.Stop();
            await Task.Delay(Math.Max(0, 16 - (int)stopwatch.ElapsedMilliseconds));
            stopwatch.Restart();
        };
        stopwatch.Stop();
        IsTask2Running = false;
    }
}
