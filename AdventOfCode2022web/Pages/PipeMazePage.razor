@page "/PipeMazePage"
@inject Domain.PipeMaze.PipeMazeService PuzzleService
<PuzzleSolutionControllerNEW PuzzleContext="@PuzzleService">
    <DefaultVisualizationNEW Step="@PuzzleService.Step" Solution="@PuzzleService.Solution" />
    <div>
        @if (PuzzleService.Step != _previousStep)
        {
            UpdateBitmap();
        }
        <img style="width:100%; image-rendering:pixelated" src=@Image64 />
    </div>
</PuzzleSolutionControllerNEW>

@code {
    public string Image64 { get; set; } = string.Empty;
    private int _previousStep = -1;
    private void UpdateBitmap()
    {
        Image64 = Visualize();
        _previousStep = PuzzleService.Step;
    }

    private string Visualize()
    {
        if (PuzzleService.Map == null)
            return string.Empty;
        var map = PuzzleService.Map();
        if (map is null)
            return string.Empty;
        var loop = PuzzleService.Loop == null ? new List<(int x, int y)>() : PuzzleService.Loop();
        var loopHash = loop.ToHashSet();

        var Width = map.GetLength(0);
        var Height = map.GetLength(1);
        var response = string.Empty;
        using (MemoryStream outStream = new())
        {
            using (Image<Rgba32> img = new(Width, Height, Color.White))
            {
                CreateVisualization(img, map, loopHash);
                img.SaveAsPng(outStream);
            }
            response = "data:image/png;base64, " + Convert.ToBase64String(outStream.ToArray());
        }
        return response;
    }

    private void CreateVisualization(Image<Rgba32> img, int[,] map, HashSet<(int x, int y)> loopHash)
    {
        img.ProcessPixelRows(accessor =>
        {
            for (int y = 0; y < accessor.Height; y++)
            {
                Span<Rgba32> pixelRow = accessor.GetRowSpan(y);
                for (int x = 0; x < pixelRow.Length; x++)
                {
                    ref Rgba32 pixel = ref pixelRow[x];
                    double v = 1-((double)(map[x, y]) / 100 - Math.Floor((double)(map[x, y] / 100)));
                    if (loopHash.Contains((x, y)))
                        pixel = new Rgba32(255, 0, 0, 255);
                    else if (map[x, y] == 0)
                        pixel = new Rgba32(255);
                    else
                        pixel = new Rgba32(0, (float)v, 0,1);

                }
            }
        });
    }
}
