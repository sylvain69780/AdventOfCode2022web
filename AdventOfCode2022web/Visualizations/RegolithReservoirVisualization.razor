<h3>RegolithReservoirVisualization</h3>
<img style="width:100%; image-rendering:pixelated" src=@Visualize() />

@code {
    [Parameter]
    public RegolithReservoir? Solver { get; set; }
    [Parameter]
    public int AnimationDuration { get; set; } = 500;

    public string _image64 = string.Empty;

    private string Visualize()
    {
        if (Solver == null || Solver.OccupiedPositions.Count == 0 )
            return string.Empty;
        var Width = Solver!.xMax - Solver.xMin;
        var Height = Solver!.yMax - Solver.yMin;
        if (Width == 0 || Height == 0)
            return string.Empty;
        var response = string.Empty;
        using (MemoryStream outStream = new())
        {
            using (Image<Rgba32> img = new(Width, Height))
            {
                img.ProcessPixelRows(accessor =>
                {
                    for (int y = 0; y < accessor.Height; y++)
                    {
                        Span<Rgba32> pixelRow = accessor.GetRowSpan(y);
                        for (int x = 0; x < pixelRow.Length; x++)
                        {
                            ref Rgba32 pixel = ref pixelRow[x];
                            if (Solver.InitialPositions!.Contains((Solver.xMin + x, Solver.yMin + y)))
                                pixel = Color.Blue;
                            else if (Solver.OccupiedPositions!.Contains((Solver.xMin + x, Solver.yMin + y)))
                                pixel = Color.Green;
                            else if (Solver.SandPosition == (Solver.xMin + x, Solver.yMin + y))
                                pixel = Color.Red;
                        }
                    }
                });
                img.SaveAsPng(outStream);
            }
            response = "data:image/png;base64, " + Convert.ToBase64String(outStream.ToArray());
        }
        return response;
    }
}
