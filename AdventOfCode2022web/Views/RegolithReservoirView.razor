@inherits PuzzleViewBase
<img style="width:100%; image-rendering:pixelated" src=@Visualize() />

@code {
    private RegolithReservoirSolution? RegolithReservoirSolution;

    protected override void OnInitialized()
    {
        RegolithReservoirSolution = (RegolithReservoirSolution)(PuzzleSolution!);
        PuzzleSolutionPage!.PuzzleOutputReturned += StateHasChanged;
        base.OnInitialized();
    }

    public void Dispose()
    {
        PuzzleSolutionPage!.PuzzleOutputReturned -= StateHasChanged;
    }

    public string _image64 = string.Empty;

    private string Visualize()
    {
        if (RegolithReservoirSolution == null || RegolithReservoirSolution.OccupiedPositions.Count == 0)
            return string.Empty;
        var Width = RegolithReservoirSolution!.xMax - RegolithReservoirSolution.xMin;
        var Height = RegolithReservoirSolution!.yMax - RegolithReservoirSolution.yMin;
        if (Width == 0 || Height == 0)
            return string.Empty;
        var response = string.Empty;
        using (MemoryStream outStream = new())
        {
            using (Image<Rgba32> img = new(Width, Height))
            {
                img.ProcessPixelRows(accessor =>
                {
                    for (int y = 0; y < accessor.Height; y++)
                    {
                        Span<Rgba32> pixelRow = accessor.GetRowSpan(y);
                        for (int x = 0; x < pixelRow.Length; x++)
                        {
                            ref Rgba32 pixel = ref pixelRow[x];
                            if (RegolithReservoirSolution.InitialPositions!.Contains((RegolithReservoirSolution.xMin + x, RegolithReservoirSolution.yMin + y)))
                                pixel = Color.Blue;
                            else if (RegolithReservoirSolution.OccupiedPositions!.Contains((RegolithReservoirSolution.xMin + x, RegolithReservoirSolution.yMin + y)))
                                pixel = Color.Green;
                            else if (RegolithReservoirSolution.SandPosition == (RegolithReservoirSolution.xMin + x, RegolithReservoirSolution.yMin + y))
                                pixel = Color.Red;
                        }
                    }
                });
                img.SaveAsPng(outStream);
            }
            response = "data:image/png;base64, " + Convert.ToBase64String(outStream.ToArray());
        }
        return response;
    }
}
