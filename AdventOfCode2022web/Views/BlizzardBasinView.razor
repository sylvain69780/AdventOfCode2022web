@inherits PuzzleViewBase
<h3>BlizzardBasinView</h3>
<p>
    You have to find the shortest way from one point to another, avoiding the "blizzards".<br />
    I'm using a breadth-search algorithm here, the difficulty being that the pattern of "blizzards" changes over time.
</p>
@if (PuzzleSolution != null && PuzzleSolution.Elves != null)
{
    var elvesSearching = PuzzleSolution!.Elves!.Where(x => x.State == BlizzardBasinElfState.Possible || x.State == BlizzardBasinElfState.Safe);
    var elvesKilled = PuzzleSolution!.Elves!.Where(x => x.State == BlizzardBasinElfState.Killed);
    var blizzard = PuzzleSolution!.BlizzardsPositions!;
    var (gridWidth, gridHeight) = (GridWidth - 2, GridHeight - 2);
    <svg viewBox="0 0 @GridWidth @GridHeight" class="img-fluid">
        <BlizzardBasinViewDefs/>
        <rect x="0" y="0" width=@GridWidth height=@GridHeight fill="grey" />
        <rect x="1" y="1" width=@(GridWidth-2) height=@(GridHeight-2) fill="url(#gridPattern)" />
        <rect x=@Entrance.X y=@Entrance.Y width="1" height="1" fill="blue" />
        <rect x=@Exit.X y=@Exit.Y width="1" height="1" fill="red" />
        <g style=@AnimationTimingStyle>
            <g class=@ElfSearchClass>
                @foreach (var elf in elvesSearching)
                {
                    <use href="#elf-possible" style=@($"--dax:{elf.StartingPosition.X}px;--day:{elf.StartingPosition.Y}px;--dbx:{elf.TargetPosition.X }px;--dby:{elf.TargetPosition.Y}px;") />
                }
            </g>
            <g class=@ElfKilledClass>
                @foreach (var elf in elvesKilled)
                {
                    <use href="#elf-possible" style=@($"--dax:{elf.StartingPosition.X}px;--day:{elf.StartingPosition.Y}px;--dbx:{elf.TargetPosition.X }px;--dby:{elf.TargetPosition.Y}px;") />
                }
            </g>
            <g class=@BlizzardClass>
                @foreach (var b in blizzard)
                {
                    if ( b.Direction == Directions.Right)
                    {
                        <use href="#blizzard-right" style=@($"--dax:{b.Position.X-1}px;--day:{b.Position.Y}px;--dbx:{b.Position.X }px;--dby:{b.Position.Y}px;") />
                        if (b.Position.X == 1)
                        {
                            <use href="#blizzard-right" style=@($"--dax:{gridWidth}px;--day:{b.Position.Y}px;--dbx:{gridWidth+1}px;--dby:{b.Position.Y}px;") />
                        }
                    }
                    if ( b.Direction == Directions.Left)
                    {
                        <use href="#blizzard-left" style=@($"--dax:{b.Position.X+1}px;--day:{b.Position.Y}px;--dbx:{b.Position.X }px;--dby:{b.Position.Y}px;") />
                        if (b.Position.X == gridWidth)
                        {
                            <use href="#blizzard-left" style=@($"--dax:1px;--day:{b.Position.Y}px;--dbx:0px;--dby:{b.Position.Y}px;") />
                        }
                    }
                    if (b.Direction == Directions.Down)
                    {
                        <use href="#blizzard-down" style=@($"--dax:{b.Position.X}px;--day:{b.Position.Y-1}px;--dbx:{b.Position.X}px;--dby:{b.Position.Y}px;") />
                        if (b.Position.Y == 1)
                        {
                            <use href="#blizzard-down" style=@($"--dax:{b.Position.X}px;--day:{gridHeight}px;--dbx:{b.Position.X}px;--dby:{gridHeight+1}px;") />
                        }
                    }
                    if (b.Direction == Directions.Up)
                    {
                        <use href="#blizzard-up" style=@($"--dax:{b.Position.X}px;--day:{b.Position.Y+1}px;--dbx:{b.Position.X}px;--dby:{b.Position.Y}px;") />
                        if (b.Position.Y == gridHeight)
                        {
                            <use href="#blizzard-up" style=@($"--dax:{b.Position.X}px;--day:1px;--dbx:{b.Position.X }px;--dby:0px;") />
                        }
                    }
                }
            </g>
            @*            <g class=@(_animationCompleted ? "elf-hidden" : "elf-killed" )>
        @{
        if (PuzzleSolution.DeadEnds != null && PuzzleSolution.DeadEnds.Count > 0)
        foreach (var p in PuzzleSolution.DeadEnds)
        {
        var style = $"--dax:{p.x - 1}px;--day:{p.y - 1}px;--dbx:{p.x - 1}px;--dby:{p.y - 1}px;";
        <use href="#myImage" style=@style />
        }
        }
        </g>
        *@
        @*<g>
                @{
                    var blizzards = PuzzleSolution.ComputeBlizzardsPos();
                    foreach (var blizzard in blizzards)
                    {
                        <g class=@(_animationCompleted?"blizzard-hidden":"blizzard")>
                            <use href="#blizzard" x="@((blizzard.x-0.5).ToStringCSS())" y="@((blizzard.y-0.5).ToStringCSS())" />
                        </g>
                    }
                }
            </g>*@
        </g>

    </svg>
}
@if (_animationCompleted)
{
    <p>Animation Stopped</p>
}
else
{
    <p>Animation Running</p>
}

@code {
    private IBlizzardBasinViewModel? PuzzleSolution { get; set; }

    protected override void OnInitialized()
    {
        PuzzleSolution = (IBlizzardBasinViewModel)(PuzzleSolutionViewModel!.PuzzleSolution!);
        PuzzleSolutionViewModel.PuzzleOutputReturned += SetTimer;
        base.OnInitialized();
    }

    public void Dispose()
    {
        PuzzleSolutionViewModel!.PuzzleOutputReturned -= SetTimer;
    }

    private Timer? _timer;
    private bool _animationCompleted = true;

    private void SetTimer()
    {
        _timer = new Timer(Callback, null, PuzzleSolutionViewModel!.AnimationDuration, Timeout.Infinite);
        _animationCompleted = false;
        StateHasChanged();
    }

    private void Callback(object? state)
    {
        _animationCompleted = true;
        StateHasChanged();
    }

    private (int X, int Y) Exit => PuzzleSolution!.ExitPosition;
    private (int X, int Y) Entrance => PuzzleSolution!.EntrancePosition;
    private int GridWidth => PuzzleSolution!.GridWidth;
    private int GridHeight => PuzzleSolution!.GridHeight;
    private string AnimationTimingStyle => $"--elf-animation-duration: {AnimationDuration}ms;";
    private string ElfSearchClass => (_animationCompleted ? "elf-still" : "elf-move");
    private string ElfKilledClass => (_animationCompleted ? "elf-hidden" : "elf-killed");
    private string BlizzardClass => (_animationCompleted ? "blizzard-still" : "blizzard-move");
}
