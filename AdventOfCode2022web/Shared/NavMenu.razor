@using AdventOfCode2022web.Puzzles;
@using System.Reflection;
@inject PuzzleHelper puzzleHelper;

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">AdventOfCode2022web</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass">
    <nav class="flex-column">
        <div class="nav-item px-3" @onclick="ToggleNavMenu">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <button class="btn btn-primary" @onclick="DecrementPage">Prev</button>
            <button class="btn btn-primary" @onclick="IncrementPage">Next</button>
        </div>
        @{
            var puzzles = puzzleHelper.Puzzles.Values.OrderBy(x => x.Number).ToList();
            var first = puzzlePageNumber * 5 ;
            var last = Math.Min(puzzles.Count-1, first + 5 - 1);
            var v1 = "puzzle";
            var v2 = "puzzleV2";
            var v3 = "puzzleV3";
            for (var puzzleIndex = first; puzzleIndex <= last; puzzleIndex++)
            {
                var item = puzzles[puzzleIndex];
                <div class="nav-item px-3" @onclick="ToggleNavMenu">
                    <NavLink class="nav-link" href="@($"{(typeof(IPuzzleSolverV3).IsAssignableFrom(item.Type) ? v3 : typeof(IPuzzleSolverV2).IsAssignableFrom(item.Type) ? v2 : v1)}/{item.Number}")">
                        <span class="oi oi-puzzle-piece" aria-hidden="true"></span>
                        <div data-toggle="tooltip" data-placement="top" title="@($"{item.Title}")">@($"Day {item.Number}")</div>
                    </NavLink>
                </div>
            }
        }
    </nav>
</div>

@code {
    private int puzzlePageNumber = 0;
    private void IncrementPage()
    {
        if (puzzlePageNumber < (puzzleHelper.Puzzles.Count - 1) / 5)
            puzzlePageNumber += 1;
    }
    private void DecrementPage()
    {
        if (puzzlePageNumber > 0) 
            puzzlePageNumber -= 1;
    }
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
