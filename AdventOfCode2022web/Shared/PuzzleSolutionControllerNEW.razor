@using System.Collections.ObjectModel;
<p>The code of this solution on <a href=@PuzzleSolutionCode>GitHub</a>.</p>
<div class="row">
    <div class="col-lg-6">
        <div class="row">
            <input type="range" id="delayRange" @bind=_settings.AnimationDuration min="0" max="5000" step="50">
            <label class="form-label" for="delayRange">@(_settings.AnimationDuration == 0 ? "Fastest" : $"Run a step every {_settings.AnimationDuration} ms")</label>
        </div>
        <button class="btn-primary" @onclick="@( () => { @MoveUntilCompleted(); })">Solution to part 1</button>
        <button class="btn-primary" @onclick="@( () => { _showPuzzleInput = !_showPuzzleInput; })">Toggle Puzzle input</button>
        <p>@Message()</p>
            @ChildContent!(_settings)
    </div>
    <div class="col-lg-6">
        <div class=@(_showPuzzleInput ? null : "collapse")>
            <div>
                <label class="form-label">The data below is what is provided as example in the problem statement. You can paste your own user input.</label>
                <button class="btn-primary" @onclick=@( async () => { await LoadDefaultPuzzleInput(); _showPuzzleInput = false;})>Load default puzzle input</button>
                <button class="btn-primary" @onclick=@( async () => { await LoadFullPuzzleInput(); _showPuzzleInput = false;})>Load a full puzzle input</button>
                <pre><textarea spellcheck="false" class="form-control" aria-label="Puzzle Input" rows="10" @bind="_input" maxlength="10000000"></textarea></pre>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public RenderFragment<VisualizationSettings>? ChildContent { get; set; }

    private readonly ReadOnlyDictionary<PageState, string> _messageText = new ReadOnlyDictionary<PageState, string>(new Dictionary<PageState, string>
    {
    {PageState.Loaded,"Click to start solving one of the the parts." },
    {PageState.Finished,"Computation completed !" },
    {PageState.Processing,"Click to run the next step, adjust the animation speed using the slider." },
    {PageState.ProcessingAuto,"Adjust processing speed using the slider. Zero means no delay." }
    });

    private string Message() => _messageText[PageState];
    private bool _showPuzzleInput = false;
}
