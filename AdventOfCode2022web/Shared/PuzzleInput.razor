@using AdventOfCode2022web.Puzzles;
@using System.Diagnostics;
@inject PuzzleHelper puzzleHelper;

<h1>@(PuzzleInfo.Title)</h1>
<p>The code for this solution on <a href="https://github.com/sylvain69780/AdventOfCode2022web/blob/master/AdventOfCode2022/Puzzles/@(PuzzleInfo.Type.Name).cs">GitHub</a></p>
<div class="mb-3 form-check form-switch">
    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind="_collapsePuzzleInput">
    <label class="form-check-label" for="flexSwitchCheckChecked">View puzzle input</label>
</div>
@if (_collapsePuzzleInput)
{
    <div>
        <label class="form-label">The data below is that provided for example. Paste your own user input from <a href="https://adventofcode.com/2022/day/@PuzzleNumber">Advent Of Code</a>.</label>
        <pre><textarea class="form-control" aria-label="Puzzle Input" rows="10" @bind="Input" maxlength="10000000"></textarea></pre>
    </div>
}

<div class="btn-group mb-3" role="group">
    <button class="btn btn-primary" disabled="@_isTaskRunning" @onclick="SolveFirstPart">Solve First Part</button>
    <button class="btn btn-primary" disabled="@_isTaskRunning" @onclick="SolveSecondPart">Solve Second Part</button>
    <button class="btn btn-primary" disabled="@(!_isTaskRunning)" @onclick="CancelComputation">Cancel</button>
    @if (_isTaskRunning)
    {
        <span class="spinner-grow text-primary ms-2" role="status">
            <span class="visually-hidden">Simulation in progress...</span>
        </span>
    }
</div>
<div class="mb-3 d-flex align-items-center">
    <input type="range" class="form-range me-3" style="width: 200px;" @bind="_delayVisualizationValue" min="0" max="1000" step="50">
    <label class="form-check-label">Delay @_delayVisualizationValue ms</label>
</div>
@if (Response != string.Empty)
{
    <div class="p-3 mb-2 bg-primary text-white">@((_isTaskRunning ? string.Empty : "The answer of the puzzle is : ") + Response)</div>
}

@code {
    [Parameter]
    public IPuzzleSolverV3? PuzzleSolver { get; set; }
    [Parameter]
    public int PuzzleNumber { get; set; }
    [Parameter]
    public Action<int>? Changed { get; set; }
    [Parameter]
    public string? Input { get; set; }
    private string? Response = string.Empty;

    (Type Type, int Number, string Title) PuzzleInfo => puzzleHelper.Puzzles[PuzzleNumber];
    bool _collapsePuzzleInput = false;
    bool _cancel;
    int _delayVisualizationValue = 500;
    bool _isTaskRunning;
    private Stopwatch _stopwatch = new Stopwatch();

    private void CancelComputation() => _cancel = true;

    private async Task SolveFirstPart() => await Solve(PuzzleSolver!.SolveFirstPart);
    private async Task SolveSecondPart() => await Solve(PuzzleSolver!.SolveSecondPart);

    private async Task Solve(Func<IEnumerable<string>> part)
    {
        Response = string.Empty;
        PuzzleSolver!.Setup(Input!);
        _isTaskRunning = true;
        _cancel = false;
        _stopwatch.Start();
        foreach (var s in part())
        {
            Response = s;
            if (_delayVisualizationValue > 0 || _stopwatch.ElapsedMilliseconds > 1000)
            {
                if (_delayVisualizationValue > 0)
                {
                    Changed!(_delayVisualizationValue);
                    await Task.Delay(_delayVisualizationValue);
                }
                Changed!(0);
                await Task.Delay(1);
                _stopwatch.Restart();
            }
            if (_cancel)
                break;
        }
        _isTaskRunning = false;
        _stopwatch.Stop();
    }
}
