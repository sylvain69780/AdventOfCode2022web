@using System.Diagnostics;
<h3>PuzzleControler</h3>
<button disabled=@IsStartProcessingForbidden @onclick=@StartPart1>Start solving Part 1</button>
<button disabled=@IsStartProcessingForbidden @onclick=@StartPart2>Start solving Part 2</button>
<button disabled=@IsMoveNextForbidden @onclick=@MoveNext>Move to next Step</button>
<button disabled=@IsMoveNextForbidden @onclick=@MoveUntilCompleted>Run all Steps</button>
<button disabled=@IsStopDisabled @onclick=@Stop>Stop</button>
@if (_isCompleted)
{
    <p class="border border-2 m-1 p-1">Ready</p>
}
@if (_isProcessing)
{
    <p>Step @(Parent?.SolvingStep ?? 0)</p>
    <input type="range" id="delayRange" @bind="Parent!.AnimationDuration" min="0" max="5000" step="50">
    <label class="form-label" for="delayRange">@Parent!.AnimationDuration ms</label>
}
<h3>Output</h3>
<pre class="display-6">@_result</pre>
@code {
    [CascadingParameter(Name = "Parent")]
    private PuzzlePageBase? Parent { get; set; }

    private IEnumerator<string>? _results;
    private string _result = string.Empty;
    private bool _isProcessing = false;
    private bool _isCompleted = true;

    private void StartPart1()
    {
        if (Parent == null || Parent.PuzzleBase == null)
            throw new NullReferenceException();
        _results = Parent.PuzzleBase.SolveFirstPart().GetEnumerator();
        SetAsRunning();
    }

    private void StartPart2()
    {
        if (Parent == null || Parent.PuzzleBase == null)
            throw new NullReferenceException();
        _results = Parent.PuzzleBase.SolveSecondPart().GetEnumerator();
        SetAsRunning();
    }

    private void SetAsRunning()
    {
        if (Parent == null)
            throw new NullReferenceException();
        Parent.PuzzleInputReloaded = false;
        Parent.SolvingStep = 0;
        _result = string.Empty;
        _isCompleted = false;
        NotifyParent();
    }

    private void MoveNext()
    {
        if (Parent == null || _results == null)
            throw new NullReferenceException();
        if (_results.MoveNext())
            NotifyParent();
        else
            SetAsCompleted();
    }

    private void SetAsCompleted()
    {
        if (Parent == null)
            throw new NullReferenceException();
        Parent.AnimationDuration = 500;
        Parent.NotifyStateHasChanged();
        _isProcessing = false;
        _results = null;
        _isCompleted = true;
    }

    public void Stop()
    {
        _isProcessing = false;
        Parent!.NotifyStateHasChanged();
    }

    private async Task MoveUntilCompleted()
    {
        if (Parent == null || _results == null)
            throw new NullReferenceException();
        _isProcessing = true;
        var stopwatch = new Stopwatch();
        stopwatch.Start();
        while (_results.MoveNext())
        {
            Parent.SolvingStep++;
            if (Parent.AnimationDuration > 0)
            {
                NotifyParent();
                await Task.Delay(Parent.AnimationDuration + 100);
            }
            if (Parent.AnimationDuration == 0 && stopwatch.ElapsedMilliseconds > 5000)
            {
                NotifyParent();
                await Task.Delay(1);
                stopwatch.Restart();
            }
            if (!_isProcessing)
                return;
        }
        await Task.Delay(1);
        SetAsCompleted();
    }

    private void NotifyParent()
    {
        if (Parent == null || _results == null)
            throw new NullReferenceException();
        _result = _results.Current;
        Parent.NotifyStateHasChanged();
    }

    private bool IsStartProcessingForbidden => _isProcessing;

    private bool IsMoveNextForbidden => _results == null || _isCompleted || _isProcessing;

    private bool IsStopDisabled => !_isProcessing;
}
